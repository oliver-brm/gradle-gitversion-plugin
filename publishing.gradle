
if (gradle.startParameter.taskNames.contains('release')) {
    logger.lifecycle 'Starting release build {}', version
    check.dependsOn integrationTest

} else {
    logger.lifecycle 'Not a release build, setting version to {}', "${project.version}-SNAPSHOT"
    project.version += '-SNAPSHOT'
}


task release {
    dependsOn build
    doLast {
        logger.lifecycle 'Release {} successful', version
    }
}


//project.plugins.withId('maven-publish') {
//
//    tasks.jar {
//        into("META-INF/maven/${project.group}/${project.name}") {
//            from { generatePomFileForMavenJavaPublication }
//            rename 'pom-default.xml', 'pom.xml'
//        }
//    }
//
//    tasks.create('sourcesJar', Jar) {
//        description = 'Assembles a jar archive containing the sources.'
//        classifier = 'sources'
//        group = 'build'
//        from sourceSets.main.allSource
//    }
//
//    tasks.create('javadocJar', Jar) {
//        description = 'Assembles a jar archive containing the javadocs.'
//        classifier = 'javadoc'
//        group = 'build'
//        from tasks.javadoc
//    }
//
//    project.publishing {
//        publications {
//            mavenJava(MavenPublication) {
//                from components.java
//                artifact tasks.sourcesJar
//                artifact tasks.javadocJar
//
//                // FIXME not sure what this does, probably sets 'compile' scope for some dependencies?
//                // Not sure if we really need this
////                pom.withXml {
////                    configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each { dep ->
////                        asNode().dependencies.dependency.find {
////                            it.artifactId.text() == dep.moduleName && it.groupId.text() == dep.moduleGroup
////                        }?.scope[0]?.value = 'compile'
////                    }
////                }
//            }
//        }
//    }
//
//}

pluginBundle {
    website = project.home_url
    vcsUrl = project.scm_url
    description = project.description
    tags = project.tags.split ','
}
tasks['release'].dependsOn tasks.publishPlugins

